// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

syntax = "proto3";

import "evecommon/devmodelcommon.proto";
import "config/devcommon.proto";

package org.lfedge.eve.config;
option go_package  = "github.com/lf-edge/eve-api/go/config";
option java_package = "org.lfedge.eve.config";

//  PhysicalIO
//     Constitutes set of parameters that define the physical devices.
//     Mainly they describes all the I/O adapters that make up the device.
//
//  L2 objects:
//     Objects hierarchically placed between PhysicalIO and SystemAdapters
//     related to Layer 2 networking.
//     Currently supported are VLANs and LAGs (Link Aggregation Groups, aka "bonds").
//     References based on logical names are used to describe parent-child
//     or master-slave relations between L2 objects and PhysicalIO.
//
//  SystemAdapters:
//     Higher-level IP-ready network endpoints.
//     SystemAdapters are used by EVE device to connect to the controller
//     and/or to share external network connectivity between applications.
//     SystemAdapters have cost, proxy configuration, Wifi credentials etc.
//     System adapter refers to an underlying L2 object or directly to PhysicalIO
//     by the logical name.

// systemAdapters are higher-level IP-ready network endpoints.
// systemAdapters give all the required bits to turn the physical IOs
// and intermediate L2 objects into useful IP endpoints.
// These endpoints can be further used to connect to controller or
// can be shared between workload/services running on the node.
message SystemAdapter {
  // name - Name of the Network Interface. This is the Port Name
  //  used in Info / Metrics / flowlog etc. Name cannot be changed.
  // This will be the Network Port name.
  string name = 1;

  // DEPRECATED by cost below
  bool freeUplink = 2;

  // uplink - DEPRECATED by PhysicalIO.Usage / PhysicalIO.UsagePolicy
  // this is part of the uplink group
  // deprecate: have a separate device policy object in the API
  bool uplink = 3;

  // networkUUID - attach this network config for this adapter
  // if not set, depending on Usage of Adapter, would be treated as
  // an L2 port
  string networkUUID = 4;

  // addr - if its static network we need ip address
  // If this is specified, networkUUID must also be specified. addr
  // is expected to be in sync with the network object (same subnet etc ).
  string addr = 5;

  // deprecated = 6

  // alias - Device just reflects it back in status / Metrics back to
  // cloud.
  string alias = 7;

  // lowerLayerName - For example, if lower layer is PhysicalAdapter
  // ( physical interface), this should point to logicallabel of the
  // physicalIO.
  string lowerLayerName = 8;

  // Cost of sending traffic over the port.
  // Used to prioritize ports and give preference to lower-cost ports (e.g. eth over wwan).
  // 0 is the lowest cost (free); 255 the highest.
  // Can be set for management and app-shared ports.
  // Cost is used for EVE management traffic and for local network instances with multiple
  // ports. For any request towards the controller or for an image download, EVE tries ports
  // in the order of increasing cost, starting with the free ports. Once it finds the lowest
  // cost port with a working connectivity, it may spread the load if there are multiple
  // connected ports of the same cost.
  // For local networking instances with multiple ports, the cost may be used to decide
  // which port to use for a particular destination network (incl. port selection for
  // the default route). Unlike the management traffic, load-balancing is currently
  // not supported for local network instances and the app traffic that is routed through
  // them.
  uint32 cost = 9;

  // A set of user-defined "shared" labels attached to the adapter.
  // There are no restrictions on the format of an adapter label, it can be any
  // non-empty string.
  // Unlike the logical label (aka port logical name), shared label is not a unique
  // port identifier. Instead, the same shared label can be assigned to multiple ports.
  // Note that EVE automatically assigns "all" label to every port, "uplink" label to every
  // management port and "freeuplink" label to every management port with zero cost.
  // ("automatically assigns" is meant here in imaginary sense, these labels are not supposed
  // to be explicitly added by the controller to SystemAdapters inside EdgeDevConfig).
  // Shared label can be used to:
  //  - designate a group of network adapters to be used by a network instances for external
  //    connectivity
  //  - limit port-forwarding firewall rule to only a subset of network adapters
  //  - create a multi-path static IP route (with multiple ports providing access to the routed
  //    destination network)
  repeated string shared_labels = 10;
}

// Given additional details for EVE software to how to treat this
// interface. Example policies could be limit use of LTE interface
// or only use Eth1 only if Eth0 is not available etc
// Note that this is the static information from the model.
// Current configuration is in systemAdapter
message PhyIOUsagePolicy {
  bool freeUplink = 1;   // DEPRECATED by cost in the SystemAdapter message

  // DEPRECATED fallBackPriority = 2;
}

// PhysicalIO:
//    Absolute low level description of physical buses and ports that are
//    available on given platform.
//    Collection of these IOs, constitute what we would call as hardware
//    model. Each physical IO is manageable and visible to EVE software, and
//    it can be further configured to either provide IP connectivity or
//    directly be given to workloads
message PhysicalIO {
  org.lfedge.eve.common.PhyIoType ptype           = 1;

  // physical label typically printed on box.
  // Example Eth0, Eth1, Wifi0, ComA, ComB
  string phylabel           = 2;

  // The hardware bus address. The key to this map can be of the following
  // (case-insensitive) values:
  // "pcilong": the address is a PCI id of the form 0000:02:00.0
  // "ifname": the address is a string for a network interface like "eth1"
  // "serial": the address is a Linux serial port alias such as "/dev/ttyS2"
  // "irq": the address is a number such as "5". This can be a comma
  //    separated list of integers or even a range of integers. Hence using
  //    a string to address this.
  // "ioports": the address is a string such as "2f8-2ff"
  // "usbaddr": the address is a USB of the form of "1:2.3"
  // If the type is PhyIoNet*, then there needs to be an "ifname" physaddr.
  map <string, string> phyaddrs = 3;

  // logicallabel - provides the ability to model designer to refer
  //    the physicalIO port to using more friendly name
  // For example Eth0->Mgmt0
  //  or USBA->ConfigDiskA etc
  string logicallabel       = 4;

  // assigngrp
  // Assignment Group, is unique label that is applied across PhysicalIOs
  // EntireGroup can be assigned to application or nothing at all
  //
  // This is the name used in AppInstanceConfig.adapters to assign an
  // adapter to an application.
  //
  // If assigngrp is not set, the Adapter cannot be assigned to any
  // application. One example is, when the adapter is on the same Pci
  // bus as another device required by Dom0.
  //
  // Even if there is only one device on the its PCIBus, the assignGrp Must
  // be set.
  string  assigngrp         = 5;

  // usage - indicates the role of adapter ( mgmt / blocked / app-direct
  //    etc. )
  org.lfedge.eve.common.PhyIoMemberUsage usage    = 6;

  // usagePolicy - Policy Object used to further refine the usage.
  // For example, specify if this should be only used as fallback?
  //    Or used as the primary uplink? Allow App traffic? restrict
  //    app traffic?? etc..
  PhyIOUsagePolicy usagePolicy    = 7;

  // physical and logical attributes
  //    For example in WWAN to which firmware version to load etc
  map <string, string> cbattr = 8;

  // list of Virtual Functions (VF) for given Physical Function (PF)
  // only applies for PHY_IO_TYPE_PHY_IO_NET_ETH_PF
  VfList vflist = 9;

  // parentassigngrp
  //
  // Parent Assignment Group is there to reference the parent assignment
  // group in order to make the device dependent on a different device.
  // Currently the concrete reason to do this is to make a usb device dependent
  // on the PCI address the USB controller is using to prevent passthrough of
  // the USB controller in one application while trying to passthrough
  // a USB device on this controller to another application.
  //
  // We only allow these two cases:
  // - children and their parent devices are assigned to the same application
  //   instance
  // - parent device stays in host and one or more children (in separate
  //   assignment groups) are assigned to one or more application instances
  string  parentassigngrp         = 10;
}

message VfList {
  // how many Virtual Functions (VF) will be created
  uint32 vf_count = 1;

  // optional configuration for given Virtual Function (VF)
  repeated EthVF data = 2;
}

// VlanAdapter represents a single VLAN sub-interface.
// The parent, which is referenced by lower_layer_name,
// should be either PhysicalIO or BondAdapter.
message VlanAdapter {
  // Logical name of this VLAN adapter.
  string logicallabel = 1;

  // A physical name of the VLAN sub-interface.
  // Note that the interface name is limited in Linux kernel to 15 characters.
  // If not defined, logicallabel will be used instead.
  string interface_name = 2;

  // Logical name of the lower layer adapter (bond or physicalIO).
  string lower_layer_name = 3;

  // VLAN ID. Valid values are from 1 to 4094.
  uint32 vlan_id = 4;
}

// A bonding mode specifies the policy indicating how bonding slaves are used
// during network transmission.
enum BondMode {
  // BOND_MODE_UNSPECIFIED : if bonding mode is not explicitly specified,
  // then by default Round-Robin policy is applied (BOND_MODE_BALANCE_RR).
  BOND_MODE_UNSPECIFIED = 0;
  // BOND_MODE_BALANCE_RR : transmit packets in sequential order from the first
  // available slave through the last. This mode provides load balancing
  // and fault tolerance.
  // This is the default bonding mode.
  BOND_MODE_BALANCE_RR = 1;
  // BOND_MODE_ACTIVE_BACKUP : only one slave in the bond is active.
  // A different slave becomes active if, and only if, the active slave fails.
  // The bond's MAC address is externally visible on only one port to avoid
  // confusing the switch.
  // This mode provides fault tolerance.
  BOND_MODE_ACTIVE_BACKUP = 2;
  // BOND_MODE_BALANCE_XOR : packet source and destination MAC addresses are
  // used to calculate hash and select the output slave interface accordingly.
  // This algorithm will place all traffic destined to a particular network
  // peer on the same slave.
  // This mode provides load balancing and fault tolerance.
  BOND_MODE_BALANCE_XOR = 3;
  // BOND_MODE_BROADCAST: transmits everything on all slave interfaces.
  // This mode provides fault tolerance.
  BOND_MODE_BROADCAST = 4;
  // BOND_MODE_802_3AD : IEEE 802.3ad Dynamic link aggregation.
  // Creates aggregation groups that share the same speed and duplex settings.
  // Utilizes all slaves in the active aggregator according to the 802.3ad
  // specification.
  // Requires that upstream networks equipment supports and has the IEEE 802.3ad
  // Dynamic link aggregation properly configured.
  BOND_MODE_802_3AD = 5;
  // BOND_MODE_BALANCE_TLB : adaptive transmit load balancing. Channel bonding that
  // does not require any special switch support. The outgoing traffic
  // is distributed according to the current load (computed relative to the speed)
  // on each slave.
  // Incoming traffic is received by the current slave. If the receiving slave
  // fails, another slave takes over the MAC address of the failed receiving slave.
  // This mode provides (TX) load balancing and fault tolerance.
  BOND_MODE_BALANCE_TLB = 6;
  // BOND_MODE_BALANCE_ALB : adaptive load balancing. Includes BOND_MODE_BALANCE_TLB
  // plus receive load balancing (RLB) for IPV4 traffic, and does not require
  // any special switch support. The receive load balancing is achieved by ARP
  // negotiation.
  // This mode provides load balancing and fault tolerance.
  BOND_MODE_BALANCE_ALB = 7;
}

// Option specifying the rate in which EVE will ask LACP link partners
// to transmit LACPDU packets in 802.3ad mode.
enum LacpRate {
  // Default LACP rate is Slow.
  LACP_RATE_UNSPECIFIED = 0;
  // Request LACP partner to transmit LACPDUs every 30 seconds.
  LACP_RATE_SLOW = 1;
  // Request LACP partner to transmit LACPDUs every 1 second.
  LACP_RATE_FAST = 2;
}

// BondAdapter aggregates multiple PhysicalIOs into one adapter for redundancy
// and load-spreading purposes.
message BondAdapter {
  // Name of this bond adapter.
  string logicallabel = 1;

  // A physical name of the bond interface.
  // Note that the interface name is limited in Linux kernel to 15 characters.
  // If not defined, logicallabel will be used instead.
  string interface_name = 2;

  // Logical names of aggregated PhysicalIOs.
  // For all bonding modes but Active-Backup the order is irrelevant.
  // In the Active-Backup mode (BOND_MODE_ACTIVE_BACKUP), the first PhysicalIO
  // in the list will be considered as the primary port (i.e. only when
  // the primary is off-line will alternate ports be used).
  repeated string lower_layer_names = 3;

  // A bonding mode specifies the policy indicating how bonding slaves are used
  // during network transmission
  BondMode bond_mode = 4;

  // Method by which link failures and recoveries are detected.
  oneof monitoring {
    // The MII monitor is driver-dependent. It monitors the links from the device
    // to the nearest connected switch. If the failure occurs beyond the nearest
    // connected switch, it cannot be detected by MII monitor.
    MIIMonitor mii = 5;
    // The ARP monitor is based on the communication to the target
    // hosts designated by their IP addresses. Even if the link is beyond
    // the nearest connected switch, the APR monitor can detect it.
    ArpMonitor arp = 6;
  }

  // Option specifying the rate in which EVE will ask LACP link partners
  // to transmit LACPDU packets in 802.3ad mode.
  LacpRate lacp_rate = 8;
}

// MIIMonitor : MII link monitoring parameters.
// Defined for BondAdapter.
message MIIMonitor {
  // Specifies the MII link monitoring frequency in milliseconds.
  // This determines how often the link state of each bond slave is inspected
  // for link failures.
  uint32 interval = 1;

  // Updelay specifies the time, in milliseconds, to wait before enabling
  // a bond slave after a link recovery has been detected.
  // The updelay value should be a multiple of the monitoring interval; if not,
  // it will be rounded down to the nearest multiple.
  // The default value is 0.
  uint32 updelay = 2;

  // Specifies the time, in milliseconds, to wait before disabling a bond
  // slave after a link failure has been detected.
  // The downdelay value should be a multiple of the monitoring interval; if not,
  // it will be rounded down to the nearest multiple.
  // The default value is 0.
  uint32 downdelay = 3;
}

// ArpMonitor : ARP-based link monitoring parameters.
// Defined for BondAdapter.
message ArpMonitor {
  // Interval specifies the ARP link monitoring frequency in milliseconds.
  uint32 interval = 1;

  // IpTargets specifies the IPv4 addresses to use as ARP monitoring peers.
  // These are the targets of ARP requests sent to determine the health of links.
  repeated string ip_targets = 2;
}
