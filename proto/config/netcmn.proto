// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

syntax = "proto3";

package org.lfedge.eve.config;
option go_package = "github.com/lf-edge/eve-api/go/config";
option java_package = "org.lfedge.eve.config";

message ipRange {
  string start = 1;
  string end = 2;
}

enum proxyProto {
  PROXY_HTTP    = 0;
  PROXY_HTTPS   = 1;
  PROXY_SOCKS   = 2;
  PROXY_FTP     = 3;
  PROXY_OTHER   = 255;
}

message ProxyServer {
  proxyProto proto  = 1;
  string     server = 2;
  uint32     port   = 3;
}

message ProxyConfig {
  // enable network level proxy in the form of WPAD
  bool networkProxyEnable = 1;

  // dedicated per protocol information
  repeated ProxyServer proxies = 2;

  // exceptions separated by commas
  string exceptions = 3;

  // or pacfile can be in place of others
  // base64 encoded
  string pacfile = 4;

  // Direct URL for wpad.dat download
  string networkProxyURL = 5;

  // Uploaded proxy certificate or certificate chain for MITM
  // this may be needed either in explicit (has ProxyServer items), automatic
  // (networkProxyEnable) or transparent (network layer not aware of proxy)
  repeated bytes proxyCertPEM = 6;
}

// deprecated use ZnetStaticDNSEntry
message ZedServer {
  string HostName   = 1;
  repeated string EID = 2;
}

// These are list of static mapping that can be added to network
message ZnetStaticDNSEntry {
  string HostName   = 1;
  repeated string Address = 2;
}

enum DHCPType {
  DHCPNoop = 0;
  // Statically configure the DHCP for port
  Static = 1;

  // Don't run any DHCP, we are in passthrough mode for app
  DHCPNone = 2;

  // deprecated = 3;

  // Run the DHCP client on this port
  Client = 4;
}

// Common for IPv4 and IPv6
message ipspec {
  DHCPType   dhcp = 2;

  // subnet is CIDR format...x.y.z.l/nn
  string subnet = 3;
  string gateway = 5;
  string domain = 6;
  string ntp = 7;
  repeated string dns = 8;

  // for IPAM management when dhcp is turned on.
  // If none provided, system will default pool.
  ipRange dhcpRange = 9;
}

enum NetworkType {
  NETWORKTYPENOOP = 0;
  V4 = 4; // Legacy - interpreted same as Dual stack
  V6 = 6; // Legacy - interpreted same as Dual stack
  CryptoV4 = 24;
  CryptoV6 = 26;
  CryptoEID = 14;
  V4Only = 7;
  V6Only = 8;
  DualV4V6 = 9;
}

enum WirelessType {
  TypeNOOP = 0;
  WiFi = 1;
  Cellular = 2;
}

enum WiFiKeyScheme {
  SchemeNOOP = 0;
  WPAPSK = 1;        // WPA-PSK
  WPAEAP = 2;        // WPA-EAP or WPA2 Enterprise
}

// User-defined method to use to determine the connectivity status.
enum ConnectivityProbeMethod {
  // Connectivity probing method is not specified and therefore will not be used.
  CONNECTIVITY_PROBE_METHOD_UNSPECIFIED = 0;
  // Use ICMP ping against the probed endpoint to determine the connectivity status.
  CONNECTIVITY_PROBE_METHOD_ICMP = 1;
  // Try to establish TCP connection with the probed endpoint to determine the connectivity
  // status.
  CONNECTIVITY_PROBE_METHOD_TCP = 2;
  // TODO: Consider adding support for BFD probing.
}

// Address of a remote endpoint to probe in order to determine connectivity status.
message ProbeEndpoint {
  // IP address or FQDN.
  string host = 1;
  // TCP port required for CONNECTIVITY_PROBE_METHOD_TCP.
  // Leave empty for CONNECTIVITY_PROBE_METHOD_ICMP.
  uint32 port = 2;
}

// Configuration for user-defined connectivity-testing probe.
message ConnectivityProbe {
  // Method to use to determine the connectivity status.
  ConnectivityProbeMethod probe_method = 1;
  // Endpoint to probe using the selected probing mechanism to determine
  // the connectivity status.
  ProbeEndpoint probe_endpoint = 2;
}