// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

syntax = "proto3";

package org.lfedge.eve.config;
option go_package = "github.com/lf-edge/eve-api/go/config";
option java_package = "org.lfedge.eve.config";

import "config/fw.proto";
import "config/netcmn.proto";
import "evecommon/acipherinfo.proto";
import "evecommon/evecommon.proto";

message NetworkConfig {
  string id = 1;
  NetworkType type = 5;

  // network ip specification
  ipspec ip = 6;

  repeated ZnetStaticDNSEntry dns = 7;

  // enterprise proxy
  ProxyConfig entProxy = 8;

  // wireless specification
  WirelessConfig wireless = 10;

  // Maximum transmission unit (MTU) to set on the associated network adapter(s).
  // This is the largest IP packet that the underlying link can and is allowed to carry.
  // This does not include the L2 header size (e.g. Ethernet header or a VLAN tag size).
  // The value is a 16-byte unsigned integer, representing the MTU size in bytes.
  // The minimum accepted value for the MTU is 1280 (RFC 8200, "IPv6 minimum link MTU").
  // If not defined (zero value), EVE will set the default MTU size, which depends
  // on the network adapter type. Ethernet and WiFi adapters default to 1500 bytes,
  // while cellular modems typically receive their MTU value from the network provider
  // (which EVE will use unless user overrides the MTU value).
  uint32 mtu = 11;
}

message NetworkAdapter {
  string name =1;         // name which we report in metrics and status
  // deprecated = 2;

  string networkId = 3;   // UUID of NetworkInstance object

  string addr = 4;        // Static IP address; could be IPv4 EID
  string hostname = 5;    // Not currently used

  // more configuration for getting addr/EID
  string cryptoEid = 10;
  string lispsignature = 6;
  bytes  pemcert = 7;
  bytes  pemprivatekey = 8;

  // Used in case of P2V, where we want to specify a macAddress
  // to vif, that is simulated towards app
  string macAddress = 9;

  // firewall
  repeated ACE acls = 40;

  // access port vlan id
  // app interface with access vlan id of zero will be treated as trunk port
  // valid vlan id range: 2 - 4093
  // vlan id 1 is implicitly used by linux bridges
  uint32 access_vlan_id = 41;

  // allow AppInstance to discover other AppInstances
  // attached to this network instance. Default is false
  bool allow_to_discover = 42;
}

message WirelessConfig {
  WirelessType type = 1;                   // either LTE or Wifi
  repeated CellularConfig cellularCfg = 5; // Cellular config
  repeated WifiConfig wifiCfg = 10;        // Wifi, can be multiple APs on a single wlan, e.g. one for 2.5Ghz, other 5Ghz SSIDs
}

message CellularConfig {
  // APN string - by default it is "internet".
  // TO BE DEPRECATED: Fill connection arguments inside access_points instead.
  // If access_points is non-empty, then APN field is ignored.
  string APN = 1;
  // Optional cellular connectivity probing.
  // By default it is enabled.
  CellularConnectivityProbe probe = 2;
  // Some LTE modems have GNSS receiver integrated and can be used for device
  // location tracking.
  // Enable this option to have location info periodically obtained from this
  // modem and published to controller and to applications.
  bool location_tracking = 3;
  // Parameters to apply for connecting to cellular networks.
  // Configured separately for every SIM card inserted into the modem.
  repeated CellularAccessPoint access_points = 4;
  // Select SIM card slot to activate.
  // Currently, EVE support only single-standby SIM card mode.
  // 0 - unspecified (leave the currently activated)
  // 1 - activate the first SIM slot
  // 2 - activate the second SIM slot
  // etc.
  uint32 activated_sim_slot = 5;
}

// CellularConnectivityProbe is used to periodically check the connectivity status of a cellular network
// by probing a remote endpoint.
// Whenever the probe fails, the cellular connection is automatically restarted. If the probe keeps failing
// even after the restart, the failure is reported in ZCellularStatus.probeError.
// The connectivity probing interval is 5 minutes and currently it is not configurable.
message CellularConnectivityProbe {
  // If true, then probing is disabled.
  bool disable = 1;
  // IP/FQDN to periodically probe using 3 pings per iteration to determine connectivity status.
  // This field is now deprecated and replaced with custom_probe (see below).
  // To maintain backward-compatibility, EVE will check both probe_address and custom_probe
  // and will use whichever has non-zero value (if any), but preferring custom_probe.
  string probe_address = 2 [deprecated=true];
  // User-defined probe for cellular connectivity testing.
  // Only IP address is allowed as ConnectivityProbe.probe_address (and port if needed),
  // not hostname.
  // The probing algorithm is more complex that just testing reachability of a remote
  // endpoint and the goal is to minimize generated traffic, probing time and false negatives
  // (that would trigger undesired re-connect).
  // EVE will periodically check the modem status, accessibility of DNS server(s) and potentially
  // also proxies in the local network, and only as the last resort (if connectivity state
  // is still unclear) it will probe the remote endpoint. If custom_probe is not defined,
  // EVE will try to ping "8.8.8.8" (Google public DNS).
  // It is recommended to use custom probe for private LTE networks where public DNS servers
  // might not be allowed by the firewall (and hence ping would fail even with a working
  // connectivity).
  ConnectivityProbe custom_probe = 3;
}

// CellularAccessPoint contains config parameters for connecting to a cellular network.
message CellularAccessPoint {
  // SIM card slot to which this configuration applies.
  // 0 - unspecified (apply to currently activated or the only available)
  // 1 - config for SIM card in the first slot
  // 2 - config for SIM card in the second slot
  // etc.
  uint32 sim_slot = 1;
  // Access Point Network to connect into.
  // By default it is "internet".
  string apn = 2;
  // Authentication protocol used by the network.
  CellularAuthProtocol auth_protocol = 3;
  // Cipher data may contain encrypted user credentials
  // (inside cellNetUsername and cellNetPassword fields).
  org.lfedge.eve.common.CipherBlock cipher_data = 4;
  // The set of cellular network operators that modem should preferably try to register
  // and connect into.
  // Network operator should be referenced by PLMN (Public Land Mobile Network) code,
  // consisting of 3-digits MCC (Mobile Country Code) and 2 or 3-digits MNC (Mobile Network Code),
  // separated by a dash, e.g. "310-260".
  // If empty, then modem will select the network automatically based on the SIM card config.
  repeated string preferred_plmns = 5;
  // If true, then modem will avoid connecting to networks with roaming.
  bool forbid_roaming = 6;
  // The list of preferred Radio Access Technologies (RATs) to use for connecting
  // to the network.
  // Order matters, first is the most preferred, second is tried next, etc.
  // Not listed technologies will not be tried.
  // If empty, then modem will select RAT automatically.
  repeated org.lfedge.eve.common.RadioAccessTechnology preferred_rats = 7;
}

enum CellularAuthProtocol {
  // No authentication.
  CELLULAR_AUTH_PROTOCOL_NONE = 0;
  // Password Authentication Protocol.
  CELLULAR_AUTH_PROTOCOL_PAP = 1;
  // Challenge-Handshake Authentication Protocol.
  CELLULAR_AUTH_PROTOCOL_CHAP = 2;
  // Both PAP and CHAP.
  CELLULAR_AUTH_PROTOCOL_PAP_AND_CHAP = 3;
}

message WifiConfig {
  string wifiSSID = 1;             // SSID for WIFI
  WiFiKeyScheme keyScheme = 2;     // key management scheme, WPA-PSK, WPS-EPA, etc
  // to be deprecated, use cipherData instead
  string identity = 5;             // WPA2 Enterprise user identity/username
  // to be deprecated, use cipherData instead
  string password = 10;            // a string of hashed psk or password
  message cryptoblock {
    string identity = 11;        // encrypted username if not empty
    string password = 12;        // encrypted Password if not empty
  }
  cryptoblock crypto = 20;         // encrypted block
  int32  priority = 25;            // priority of connection, default is 0

  org.lfedge.eve.common.CipherBlock cipherData = 30; // contains encrypted credential information
}
