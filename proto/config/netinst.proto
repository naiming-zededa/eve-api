// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

syntax = "proto3";

package org.lfedge.eve.config;
option go_package = "github.com/lf-edge/eve-api/go/config";
option java_package = "org.lfedge.eve.config";

import "config/devcommon.proto";
import "config/netcmn.proto";

enum ZNetworkInstType {
  ZNetInstFirst    = 0;
  ZnetInstSwitch   = 1;
  ZnetInstLocal    = 2;
  ZnetInstCloud    = 3;
  ZnetInstMesh     = 4;
  ZnetInstHoneyPot = 5;
  ZnetInstTransparent = 6;
  ZNetInstLast     = 255;
}

enum AddressType {
  First    = 0;
  IPV4    = 1;
  IPV6    = 2;
  CryptoIPV4    = 3;
  CryptoIPV6    = 4;
  Last    = 255;
}

enum ZNetworkOpaqueConfigType {
  ZNetOConfigVPN   = 0;
  ZNetOConfigLisp  = 1;
}

// Network Instance Opaque config. In future we might add more fields here
// but idea is here. This is service specific configuration.
message NetworkInstanceOpaqueConfig {
  string oconfig = 1;
  NetworkInstanceLispConfig lispConfig = 2;
  ZNetworkOpaqueConfigType  type = 3;
}

enum ZcServiceType {
  zcloudInvalidSrv = 0;
  // mapping service for zededa overlay service
  mapServer = 1;

  // if device has support feature enabled, this is cloud service from
  // device can be reached
  supportServer = 2;
}

// This is way to tell the device if there is service in cloud somewhere,
// what type it is how to access it
message ZcServicePoint {
  ZcServiceType zsType = 3;
  string NameOrIp   = 1;
  string Credential = 2;
}

// Lisp NetworkInstance config
message NetworkInstanceLispConfig {
  repeated ZcServicePoint LispMSs = 1;
  uint32 LispInstanceId = 2;

  bool allocate = 3;
  bool exportprivate = 4;
  bytes allocationprefix = 5;
  uint32 allocationprefixlen = 6;

  // various configuration to dataPlane, lispers.net vs Zededa
  bool experimental = 20;
}

message IPRoute {
  // Destination network address in the CIDR format: <IP-address>/<prefix-length>
  // It is allowed to submit default route with all-zeroes destination network address
  // 0.0.0.0/0 or ::/0.
  string destination_network = 1;
  // Gateway IP address.
  // This must be a valid IP address and can not be all-zeroes.
  // At least one of 'gateway' or 'port' (see below) must be defined (both can be set).
  // This can be an external gateway IP or an IP address of one of the app instances
  // connected to the network instance.
  string gateway = 2;
  // Output device port for the routed traffic.
  // Either a single NI port referenced by its name (SystemAdapter.Name, aka logical label)
  // or an adapter shared-label matching zero or more NI ports (multipath routing).
  // Can be used additionally to or instead of `gateway` to determine the next hop
  // and the output network interface for the destination network.
  // At least one of 'gateway' or 'port' must be defined.
  // Since 'port' refers to one or more physical network adapters, it is not applicable
  // to routes where gateway points to another application instance running on EVE.
  // If shared label is used, EVE will pick (at most) one of the matched ports to be used
  // for route at a given time. Port is selected based on connectivity status, port costs,
  // wwan signal strength, etc. - see config options below.
  // Note that load-balancing across multiple ports is not yet supported.
  // Also please note that if `gateway` is defined, only ports with subnets containing
  // the gateway IP will be considered.
  string port = 3;
  // Periodically probe remote endpoint to determine connectivity status of every port
  // selected for the route (by the 'port' label, see above). One of the ports with
  // a working connectivity is then picked for the route. If there are multiple connected
  // ports, other port selection criteria are considered (port costs, wwan signal strength,
  // etc., see other options of IPRoute).
  // Probing effectively provides automatic fail-over between ports.
  // If 'port' is not defined or references only a single port (e.g. directly by
  // the logical label), probing is skipped (nothing to fail-over to anyway).
  // If probing is not enabled, EVE picks the port based on other remaining criteria,
  // such as cost, wwan network signal, etc. (and eventually possibly making a random
  // choice).
  PortProbe probe = 4;
  // When EVE is deciding which port to use for multipath route and multiple ports have
  // working connectivity (or probing is disabled), port can be selected based on the cost
  // (see SystemAdapter.cost). If this option is enabled, EVE will prefer ports with lower
  // costs.
  bool prefer_lower_cost = 5;
  // When EVE is deciding which port to use for multipath route and there are multiple
  // candidates among cellular modems, it might make sense to consider the current cellular
  // network signal strength. If this option is enabled, EVE will prefer cellular ports
  // with better signal (only among cellular ports).
  bool prefer_stronger_wwan_signal = 6;
  // TODO: config for multipath load-balancing
}

// Configuration for port connectivity probe.
message PortProbe {
  // Use ICMP ping towards the port's gateway IP to determine connectivity status.
  // This probing is performed much more frequently than the custom_probe and provides
  // faster fail-over. On the other hand, it generates more traffic through the probed
  // ports. Use gw_ping_max_cost (see below) to limit which ports it is enabled for
  // based on the port cost.
  // Avoid using this probe method if the gateway router is configured to drop/ignore
  // ICMP pings and therefore this probe method would return false negatives.
  bool enable_gw_ping = 1;
  // Ports exceeding this cost will have the gateway probing disabled to reduce
  // traffic generated by probing (only less-frequent custom_probe will be performed).
  uint32 gw_ping_max_cost = 2;
  // User-defined method to use to determine the port connectivity status.
  // Run additionally to gateway pings (if enabled).
  ConnectivityProbe custom_probe = 3;
}

// Configuration for the Spanning Tree Protocol (STP), which is run for switch network
// instance when the port label matches multiple network ports.
message SpanningTreeProtocol {
  // Ports matched by this adapter label (logical or shared) will have the BPDU guard enabled.
  // It makes sense to enable the guard on ports which are expected to be leafs
  // and therefore not participate in STP, or where the downstream bridges are not fully
  // trusted.
  string ports_with_bpdu_guard = 1;
}

message NetworkInstanceConfig {
  UUIDandVersion uuidandversion = 1;
  string displayname = 2;

  // instType - Type of network instance ( local, bridge etc )
  ZNetworkInstType instType = 4;
  // activate
  //  - True by default. If set to false ( deactivate), the network instance
  //    configuration is downloaded to the device, but the network instance
  //    itself is not created on the device.
  bool activate = 5;

  // Port(s) providing external connectivity for the network instance.
  // Either a single port referenced by its name (SystemAdapter.Name, aka logical label)
  // or an adapter shared-label matching zero or more network ports (ports containing this
  // label in SystemAdapter.shared_labels).
  // Note that apart from the user-defined adapter labels, EVE automatically assigns shared
  // label "all" to every port, "uplink" to every management port and "freeuplink" to every
  // management port with zero cost.
  // Both physical (e.g. eth0) and logical (e.g. vlan0) ports are allowed.
  // However, EVE may filter out some of the matched ports which are not compatible
  // with the network instance type (e.g. wireless adapters cannot be used with switch NI
  // and ports without IP addresses are not usable for local NIs).
  // Network instance with no assigned port (empty port reference or label not matching
  // any port) is air-gapped, i.e. completely isolated from external networks.
  // With multiple ports assigned, the behaviour depends on the network instance type.
  // Switch network instance will run Rapid Spanning Tree Protocol (RSTP) to avoid bridge
  // loops and the broadcast storm that results from them.
  // Local network instance will apply IP routes configured for the matched ports (either
  // statically or via DHCP) to select the next hop and the output port for a given flow.
  // Traffic not matching any connected, statically-configured, or DHCP-received route,
  // will be routed according to the default route. Unless user configures a static default
  // route with customized output port selection, EVE will pick one of the ports for
  // the default route by periodic connectivity probing, performed for every selected port
  // (skipped if NI has 1 or 0 ports).
  // First, NI ports are filtered down to those with a known gateway IP. Then probing
  // is used to determine connectivity status. For NIs with EVE-provided "uplink" or
  // "freeuplink" labels, i.e. matching only mgmt ports, EVE checks port gateway IP
  // reachability using ICMP ping and controller reachability with TCP connect to
  // <controller-IP>:443. For NIs with user-defined shared-labels, possibly also matching
  // app-shared ports, only ICMP ping of the port gateway is performed. EVE then picks port
  // with a working connectivity, preferring the currently used one.
  // Add a static default route (see 'static_routes" below) to customize the output port
  // selection algorithm.
  Adapter port = 20;

  // Configuration for the Spanning Tree Protocol (STP), which is run for switch network
  // instance when the port label matches multiple network ports.
  SpanningTreeProtocol stp = 21;

  // cfg - Used to pass some feature-specific configuration to the
  //       network instance. For Ex: Lisp, StriongSwan etc
  NetworkInstanceOpaqueConfig cfg = 30;

  // type of ipSpec
  AddressType ipType = 39;

  // network ip specification
  // Note that ip.gateway must be a valid IP address and can not be all-zeroes.
  // To suppress automatic propagation of the default route into apps, configure network
  // instance as air-gapped (without port) or mark all NI ports as app-shared
  // (not for management) and ensure that they will not get a default route
  // (e.g. set ip.gateway of the attached NetworkConfig(s) to all-zeroes IP).
  ipspec ip = 40;

  // static DNS entry, if we are running DNS/DHCP service
  repeated ZnetStaticDNSEntry dns = 41;
  // Enable to use DHCP to automatically propagate routes for port subnets
  // into applications connected to them indirectly through local network instances.
  // This option is only valid for local network instances. For other types
  // of network instances, it will be ignored.
  bool propagate_connected_routes = 42;
  // List of IP routes statically added to the network instance routing table.
  // Statically routed subnets are also propagated to connected applications
  // using DHCP, with gateway set to the network instance bridge IP if it is
  // outside of the network instance subnet.
  //
  // IP route gateway may point to an external endpoint (provided that network
  // instance is not air-gapped), or to an IP address of one of the applications
  // connected to the network instance. For an external gateway, user may specify
  // output port label instead of the IP address. EVE will automatically determine
  // the gateway IP address (based on the port config statically configured or received
  // via DHCP).
  //
  // Static routes are handled independently from connected routes. While connected
  // routes are propagated to applications only if enabled by propagate_connected_routes,
  // static routes are always propagated. Both connected and statically configured
  // routes can be propagated at the same time, there are no restrictions for using both.
  //
  // Note that the default route (with the bridge IP as the gateway) is automatically
  // propagated to connected applications, unless network instance is air-gapped
  // (without port) or all NI ports are app-shared (not management) and neither
  // of them has a default route. In both cases, it is possible to enforce default
  // route propagation by configuring a static default route for the network instance.
  //
  // For more info on static and connected routes please refer to:
  // https://wiki.lfedge.org/display/EVE/Connected+and+Static+IP+Route
  //
  // This option is only valid for local network instances. For other types
  // of network instances, it will be ignored.
  repeated IPRoute static_routes = 43;

  // Maximum transmission unit (MTU) to set for the network instance and all application
  // interfaces connected to it.
  // This is the largest IP packet that the network instance is allowed to carry.
  // This does not include the L2 header size (e.g. Ethernet header or a VLAN tag size).
  // The value is a 16-byte unsigned integer, representing the MTU size in bytes.
  // The minimum accepted value for the MTU is 1280 (RFC 8200, "IPv6 minimum link MTU").
  // If not defined (zero value), EVE will set the MTU to the default value of 1500 bytes.
  // On the host side, MTU is set to interfaces by EVE. On the guest (app) side,
  // the responsibility to set the MTU lies either with EVE or with the user/app, depending on
  // the network instance, app type and the type of interfaces used (local or switch,
  // VM or container, virtio or emulated).
  // For container applications running inside an EVE-created shim-VM, EVE initializes
  // the MTU of interfaces during shim-VM boot. Furthermore, interfaces connected
  // to local network instances will have their MTUs automatically updated if there is
  // a change in MTU configuration. To update the MTU of interfaces connected to switch
  // network instances, the user may run an external DHCP server in the network and publish
  // MTU changes via DHCP option 26 (the DHCP client run by EVE inside shim-VM will pick it up
  // and apply it).
  // In the case of VM applications, it is mostly the responsibility of the app/user to set
  // and keep the MTUs up-to-date.
  // If device provides HW-assisted virtualization capabilities, EVE will connect VM with
  // network instances using para-virtualized virtio interfaces, which allow to propagate MTU
  // value from the host to the guest. If the virtio driver used by the app supports the MTU
  // propagation (VIRTIO_NET_F_MTU feature flag is set), the initial MTU values will be set
  // using virtio (regardless of the network instance type).
  // To support MTU update for interfaces connected to local network instances, the app can
  // run a DHCP client and receive the latest MTU via DHCP option 26. For switch network
  // instances, the user can run his own external DHCP server in the network with the MTU
  // option configured.
  // Please note that application traffic leaving or entering the device via a network
  // adapter associated with the network instance is additionally limited by MTU values
  // of NI ports, configured within their NetworkConfig objects (refer to netconfig.proto).
  // If the configured network instance MTU is higher than MTU of any of the NI ports,
  // EVE will flag the network instance with an error and use the lowest MTU among
  // all the NI ports for the network instance instead. This is to prevent apps from sending
  // packets exceeding the path MTU. Packets entering NI via port with a higher MTU and with
  // size exceeding the NI MTU will get fragmented inside EVE (if allowed by IP header).
  // By default (if MTU is not configured by the user, i.e. 'mtu' is zero), EVE uses 1500
  // as MTU for air-gapped network instances and the lowest MTU among NI ports for NIs with
  // external connectivity.
  uint32 mtu = 44;

  // Disable flow logging for this network instance.
  // When flow logging is enabled, EVE periodically records all application TCP and UDP
  // flows. A flow record includes the application UUID, VIF name, open/close timestamps,
  // source/destination IP/port/protocol 5-tuple, and packet and byte counters.
  // Additionally, EVE records every DNS request made by an application, including
  // the request time, the hostname being resolved, and the returned IP address(es).
  // The flow logging API can be found in proto/config/flowlog/flowlog.proto
  // If flow logging is not needed, it is recommended to disable this feature as it
  // can potentially generate a large amount of data, which is then uploaded to the controller.
  // Depending on the implementation, it may also introduce additional packet processing
  // overhead.
  bool disable_flowlog = 50;

  // VLAN access ports configured for a switch network instance.
  // For other types of network instances, this option is ignored.
  // This setting applies to physical network ports attached to the network instance.
  // VLAN configuration for application interfaces is applied separately via AppInstanceConfig
  // (see NetworkAdapter.access_vlan_id).
  repeated VlanAccessPort vlan_access_ports = 51;
}

// VLAN Access Port config applied to physical port(s) attached to a Switch Network Instance.
message VlanAccessPort {
  // VLAN ID from the range <1,4094>
  uint32 vlan_id = 1;
  // Physical network adapter used as the access port for the given VLAN.
  // Either a single NI port referenced by its name (SystemAdapter.Name, aka logical label)
  // or an adapter shared-label matching zero or more NI ports.
  string access_port = 2;
}